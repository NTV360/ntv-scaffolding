name: CI Pipeline

on:
  push:
    branches:
      - main
      - development
      - staging
  pull_request:
    branches:
      - main
      - development

permissions:
  actions: read
  contents: read
  checks: write
  pull-requests: write

env:
  NODE_VERSION: '20'
  NX_CLOUD_DISTRIBUTED_EXECUTION: true

jobs:
  setup:
    name: 🔧 Setup & Cache Dependencies
    runs-on: ubuntu-latest
    outputs:
      node-cache-hit: ${{ steps.node-cache.outputs.cache-hit }}
      playwright-cache-hit: ${{ steps.playwright-cache.outputs.cache-hit }}
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          filter: tree:0
          fetch-depth: 0

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Cache Node Modules
        id: node-cache
        uses: actions/cache@v4
        with:
          path: node_modules
          key: node-modules-${{ runner.os }}-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            node-modules-${{ runner.os }}-

      - name: 🎭 Cache Playwright Browsers
        id: playwright-cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/ms-playwright
            ~/Library/Caches/ms-playwright
            %USERPROFILE%\AppData\Local\ms-playwright
          key: playwright-${{ runner.os }}-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            playwright-${{ runner.os }}-

      - name: 📦 Install Dependencies
        if: steps.node-cache.outputs.cache-hit != 'true'
        run: |
          echo "::group::Installing npm dependencies"
          npm ci --legacy-peer-deps --prefer-offline --no-audit
          echo "::endgroup::"

      - name: 🎭 Install Playwright Browsers
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        run: |
          echo "::group::Installing Playwright browsers"
          npx playwright install --with-deps chromium
          echo "::endgroup::"

  lint-and-test:
    name: 🔍 Lint & Test
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          filter: tree:0
          fetch-depth: 0

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Restore Node Modules Cache
        uses: actions/cache@v4
        with:
          path: node_modules
          key: node-modules-${{ runner.os }}-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            node-modules-${{ runner.os }}-

      - name: 📦 Install Dependencies (if cache miss)
        if: needs.setup.outputs.node-cache-hit != 'true'
        run: npm ci --legacy-peer-deps --prefer-offline --no-audit

      - name: 🔧 Setup Nx Cloud
        run: |
          echo "::group::Starting Nx Cloud CI run"
          npx nx-cloud start-ci-run --distribute-on="3 linux-medium-js" --stop-agents-after="e2e-ci"
          echo "::endgroup::"

      - name: 🔧 Set Nx SHAs
        uses: nrwl/nx-set-shas@v4

      - name: 🔍 Run Linting
        run: |
          echo "::group::Running ESLint on affected projects"
          npx nx affected -t lint --parallel=3 --verbose
          echo "::endgroup::"

      - name: 🧪 Run Unit Tests
        run: |
          echo "::group::Running Jest tests on affected projects"
          npx nx affected -t test --parallel=3 --verbose --coverage --ci
          echo "::endgroup::"

      - name: 📊 Upload Test Coverage
        uses: codecov/codecov-action@v4
        if: always()
        with:
          directory: ./coverage
          flags: unittests
          name: codecov-umbrella

  build:
    name: 🏗️ Build Applications
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          filter: tree:0
          fetch-depth: 0

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Restore Node Modules Cache
        uses: actions/cache@v4
        with:
          path: node_modules
          key: node-modules-${{ runner.os }}-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            node-modules-${{ runner.os }}-

      - name: 📦 Install Dependencies (if cache miss)
        if: needs.setup.outputs.node-cache-hit != 'true'
        run: npm ci --legacy-peer-deps --prefer-offline --no-audit

      - name: 🔧 Set Nx SHAs
        uses: nrwl/nx-set-shas@v4

      - name: 🏗️ Build Applications
        run: |
          echo "::group::Building affected applications"
          npx nx affected -t build --parallel=3 --verbose
          echo "::endgroup::"

      - name: 📦 Upload Build Artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: build-artifacts
          path: |
            dist/
            !dist/**/*.map
          retention-days: 7

  e2e:
    name: 🎭 End-to-End Tests
    runs-on: ubuntu-latest
    needs: [setup, build]
    strategy:
      fail-fast: false
      matrix:
        shard: [1, 2]
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          filter: tree:0
          fetch-depth: 0

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Restore Node Modules Cache
        uses: actions/cache@v4
        with:
          path: node_modules
          key: node-modules-${{ runner.os }}-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            node-modules-${{ runner.os }}-

      - name: 🎭 Restore Playwright Cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/ms-playwright
            ~/Library/Caches/ms-playwright
            %USERPROFILE%\AppData\Local\ms-playwright
          key: playwright-${{ runner.os }}-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            playwright-${{ runner.os }}-

      - name: 📦 Install Dependencies (if cache miss)
        if: needs.setup.outputs.node-cache-hit != 'true'
        run: npm ci --legacy-peer-deps --prefer-offline --no-audit

      - name: 🎭 Install Playwright (if cache miss)
        if: needs.setup.outputs.playwright-cache-hit != 'true'
        run: npx playwright install --with-deps chromium

      - name: 📦 Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: dist/

      - name: 🔧 Set Nx SHAs
        uses: nrwl/nx-set-shas@v4

      - name: 🎭 Run E2E Tests
        run: |
          echo "::group::Running E2E tests (Shard ${{ matrix.shard }}/2)"
          npx nx affected -t e2e-ci --verbose --shard=${{ matrix.shard }}/2
          echo "::endgroup::"

      - name: 📊 Upload E2E Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-results-shard-${{ matrix.shard }}
          path: |
            test-results/
            playwright-report/
          retention-days: 7

  summary:
    name: 📋 CI Summary
    runs-on: ubuntu-latest
    needs: [lint-and-test, build, e2e]
    if: always()
    steps:
      - name: 📋 Generate Summary
        run: |
          echo "## 🚀 CI Pipeline Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| 🔍 Lint & Test | ${{ needs.lint-and-test.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 🏗️ Build | ${{ needs.build.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 🎭 E2E Tests | ${{ needs.e2e.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 Performance Optimizations Applied:" >> $GITHUB_STEP_SUMMARY
          echo "- ⚡ Parallel job execution with dependency caching" >> $GITHUB_STEP_SUMMARY
          echo "- 🎭 Playwright browser caching (saves ~2-3 minutes)" >> $GITHUB_STEP_SUMMARY
          echo "- 📦 Smart dependency installation with cache restoration" >> $GITHUB_STEP_SUMMARY
          echo "- 🔄 Nx Cloud distributed execution" >> $GITHUB_STEP_SUMMARY
