name: 🚀 CI & Deployment

on:
  push:
    branches:
      - main
      - development
      - staging
      - feature/merge-ci-and-deployment
  pull_request:
    branches:
      - main
      - development

permissions:
  contents: read
  actions: read

env:
  NODE_OPTIONS: --max_old_space_size=4096
  HUSKY: 0

jobs:
  ci-checks:
    name: 🔍 CI Checks
    runs-on: ubuntu-latest
    outputs:
      host_installation_changed: ${{ steps.detect.outputs.host_installation_changed }}
      component_pantry_changed: ${{ steps.detect.outputs.component_pantry_changed }}
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: 💾 Cache node modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: 📦 Install dependencies
        run: npm ci --legacy-peer-deps --prefer-offline --no-audit

      - name: 🔍 Set Nx SHAs
        uses: nrwl/nx-set-shas@v4

      - name: 🔍 Detect affected projects
        id: detect
        run: |
          HOST=$(npx nx show projects --affected --target=build | grep host-installation || true)
          COMPONENT=$(npx nx show projects --affected --target=build | grep component-pantry || true)
          echo "host_installation_changed=${{ !!HOST }}" >> $GITHUB_OUTPUT
          echo "component_pantry_changed=${{ !!COMPONENT }}" >> $GITHUB_OUTPUT

      - name: ☁️ Start Nx Cloud CI run
        run: npx nx-cloud start-ci-run --distribute-on="3 linux-medium-js" --stop-agents-after="e2e"

      - name: ⚡ Run lint and test
        run: npx nx affected -t lint test --parallel=3

      - name: 🏗️ Run build
        run: npx nx affected -t build --parallel=3

      - name: 🔍 Get Playwright version
        id: playwright-version
        run: echo "version=$(npm list @playwright/test --depth=0 --json | jq -r '.dependencies[\"@playwright/test\"].version')" >> $GITHUB_OUTPUT

      - name: 🎭 Cache Playwright browsers
        uses: actions/cache@v4
        id: playwright-cache
        with:
          path: ~/.cache/ms-playwright
          key: playwright-${{ runner.os }}-${{ steps.playwright-version.outputs.version }}-chromium

      - name: 🎭 Install Playwright browsers
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        run: npx playwright install --with-deps chromium

      - name: 🧪 Run E2E tests
        run: npx nx affected -t e2e --parallel=1
        env:
          PLAYWRIGHT_BROWSERS_PATH: ~/.cache/ms-playwright

  deploy-host-installation:
    name: 🚀 Deploy Host Installation
    needs: ci-checks
    if: needs.ci-checks.outputs.host_installation_changed == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set deployment variables
        run: |
          if [[ "${{ github.ref_name }}" == "main" ]]; then
            echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID_PROD }}" >> $GITHUB_ENV
            echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}" >> $GITHUB_ENV
            echo "S3_BUCKET=${{ secrets.S3_BUCKET_HOST_INSTALLATION_PROD }}" >> $GITHUB_ENV
            echo "CF_ID=${{ secrets.CLOUDFRONT_DISTRIBUTION_ID_HOST_INSTALLATION_PROD }}" >> $GITHUB_ENV
          elif [[ "${{ github.ref_name }}" == "staging" ]]; then
            echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID_STAGING }}" >> $GITHUB_ENV
            echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY_STG }}" >> $GITHUB_ENV
            echo "S3_BUCKET=${{ secrets.S3_BUCKET_HOST_INSTALLATION_STG }}" >> $GITHUB_ENV
            echo "CF_ID=${{ secrets.CLOUDFRONT_DISTRIBUTION_ID_HOST_INSTALLATION_STG }}" >> $GITHUB_ENV
          else
            echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID_DEV }}" >> $GITHUB_ENV
            echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY_DEV }}" >> $GITHUB_ENV
            echo "S3_BUCKET=${{ secrets.S3_BUCKET_HOST_INSTALLATION_DEV }}" >> $GITHUB_ENV
            echo "CF_ID=${{ secrets.CLOUDFRONT_DISTRIBUTION_ID_HOST_INSTALLATION_DEV }}" >> $GITHUB_ENV

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Deploy to S3 and Invalidate CloudFront
        run: |
          aws s3 sync dist/apps/ntv-host-installation/host-installation/browser s3://$S3_BUCKET --delete
          aws cloudfront create-invalidation --distribution-id $CF_ID --paths "/*"

  deploy-component-pantry:
    name: 📘 Deploy Component Pantry Storybook
    needs: ci-checks
    if: needs.ci-checks.outputs.component_pantry_changed == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set deployment variables
        run: |
          if [[ "${{ github.ref_name }}" == "main" ]]; then
            echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID_PROD }}" >> $GITHUB_ENV
            echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}" >> $GITHUB_ENV
            echo "S3_BUCKET=${{ secrets.S3_BUCKET_COMPONENT_PANTRY_STORYBOOK_PROD }}" >> $GITHUB_ENV
            echo "CF_ID=${{ secrets.CLOUDFRONT_DISTRIBUTION_ID_COMPONENT_PANTRY_STORYBOOK_PROD }}" >> $GITHUB_ENV
          elif [[ "${{ github.ref_name }}" == "staging" ]]; then
            echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID_STAGING }}" >> $GITHUB_ENV
            echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY_STG }}" >> $GITHUB_ENV
            echo "S3_BUCKET=${{ secrets.S3_BUCKET_COMPONENT_PANTRY_STORYBOOK_STG }}" >> $GITHUB_ENV
            echo "CF_ID=${{ secrets.CLOUDFRONT_DISTRIBUTION_ID_COMPONENT_PANTRY_STORYBOOK_STG }}" >> $GITHUB_ENV
          else
            echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID_DEV }}" >> $GITHUB_ENV
            echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY_DEV }}" >> $GITHUB_ENV
            echo "S3_BUCKET=${{ secrets.S3_BUCKET_COMPONENT_PANTRY_STORYBOOK_DEV }}" >> $GITHUB_ENV
            echo "CF_ID=${{ secrets.CLOUDFRONT_DISTRIBUTION_ID_COMPONENT_PANTRY_STORYBOOK_DEV }}" >> $GITHUB_ENV

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Deploy Storybook to S3 and Invalidate CloudFront
        run: |
          aws s3 sync dist/storybook/component-pantry s3://$S3_BUCKET --delete
          aws cloudfront create-invalidation --distribution-id $CF_ID --paths "/*"
