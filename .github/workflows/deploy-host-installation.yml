name: Deploy Host Installation App

on:
  push:
    branches:
      - main
      - staging
      - development
      - feature/ci-cd-deployment
    paths:
      - 'apps/host-installation/**'
      - 'libs/component-pantry/**'
      - '.github/workflows/deploy-host-installation.yml'


permissions:
  contents: read
  actions: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      repository-projects: write

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Set Nx affected SHAs
        uses: nrwl/nx-set-shas@v4
        with:
          gh-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Check if host-installation is affected
        id: affected
        run: |
          npx nx show projects --affected --target=build | grep host-installation \
            && echo "affected=true" >> $GITHUB_OUTPUT \
            || echo "affected=false" >> $GITHUB_OUTPUT

      - name: Set deployment variables
        if: steps.affected.outputs.affected == 'true'
        run: |
          if [[ "${{ github.ref_name }}" == "main" ]]; then
            echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID_PROD }}" >> $GITHUB_ENV
            echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}" >> $GITHUB_ENV
            echo "S3_BUCKET=${{ secrets.S3_BUCKET_HOST_INSTALLATION_PROD }}" >> $GITHUB_ENV
            echo "CF_ID=${{ secrets.CLOUDFRONT_DISTRIBUTION_ID_HOST_INSTALLATION_PROD }}" >> $GITHUB_ENV
          elif [[ "${{ github.ref_name }}" == "staging" ]]; then
            echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID_STAGING }}" >> $GITHUB_ENV
            echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY_STG }}" >> $GITHUB_ENV
            echo "S3_BUCKET=${{ secrets.S3_BUCKET_HOST_INSTALLATION_STG }}" >> $GITHUB_ENV
            echo "CF_ID=${{ secrets.CLOUDFRONT_DISTRIBUTION_ID_HOST_INSTALLATION_STG }}" >> $GITHUB_ENV
          else
            echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID_DEV }}" >> $GITHUB_ENV
            echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY_DEV }}" >> $GITHUB_ENV
            echo "S3_BUCKET=${{ secrets.S3_BUCKET_HOST_INSTALLATION_DEV }}" >> $GITHUB_ENV
            echo "CF_ID=${{ secrets.CLOUDFRONT_DISTRIBUTION_ID_HOST_INSTALLATION_DEV }}" >> $GITHUB_ENV
          fi

      - name: Build host-installation (only if affected)
        if: steps.affected.outputs.affected == 'true'
        run: |
          if [[ "${{ github.ref_name }}" == "main" || "${{ github.ref_name }}" == "staging" ]]; then
            npm run build:host:prod
          else
            npm run build:host:dev
          fi

      - name: Configure AWS credentials
        if: steps.affected.outputs.affected == 'true'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Deploy to S3 and Invalidate CloudFront
        if: steps.affected.outputs.affected == 'true'
        run: |
          aws s3 sync dist/apps/ntv-host-installation/host-installation/browser s3://$S3_BUCKET --delete
          aws cloudfront create-invalidation --distribution-id $CF_ID --paths "/*"
